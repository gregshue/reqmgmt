[DOCUMENT]
TITLE: System Initialization
REQ_PREFIX: ZEP-

[GRAMMAR]
IMPORT_FROM_FILE: software_requirements.sgra

[FREETEXT]

TBD

[/FREETEXT]

[SECTION]
TITLE: Interface Requirements

[FREETEXT]

TBD

[/FREETEXT]

[REQUIREMENT]
UID: ZEP-127
STATUS: Draft
TYPE: Interface
COMPONENT: System Initialization
TITLE: Build-time Registration for System Initialization Notifications
STATEMENT: >>>
The Zephyr RTOS shall expose an interface to build-time registration for the following system initialization notifications:

- Pre-CPU Architecture Initialization
- Pre-Kernel Initialization
- Post-Kernel Initialized
- Application Initialization
<<<

[/SECTION]

[SECTION]
TITLE: Functional Requirements

[FREETEXT]

TBD

[/FREETEXT]

[REQUIREMENT]
UID: ZEP-128
STATUS: Draft
TYPE: Functional
COMPONENT: System Initialization
TITLE: Sustain hardware watchdog inherited from preceding executable
STATEMENT: >>>
Where the Zephyr RTOS inherits an active hardware watchdog that cannot be reconfigured,

the Zephyr RTOS shall sustain the active hardware watchdog.
<<<

[REQUIREMENT]
UID: ZEP-129
STATUS: Draft
TYPE: Functional
COMPONENT: System Initialization
TITLE: Initial CPU stack usage kept within published limits
STATEMENT: >>>
The Zephyr RTOS shall use no more than the published amount of the initial CPU stack.
<<<

[REQUIREMENT]
UID: ZEP-130
STATUS: Draft
TYPE: Functional
COMPONENT: System Initialization
TITLE: Preceding executable data availability
STATEMENT: >>>
While the Zephyr RTOS is in any system initialization phase,

the Zephyr RTOS shall allow read access to the data provided by the preceding executable.
<<<

[REQUIREMENT]
UID: ZEP-131
STATUS: Draft
TYPE: Functional
COMPONENT: System Initialization
TITLE: Initialization follows component dependency order
STATEMENT: >>>
The Zephyr RTOS shall initialize the system following the order of component dependencies.
<<<

[REQUIREMENT]
UID: ZEP-138
STATUS: Draft
TYPE: Functional
COMPONENT: System Initialization
TITLE: Initialization ends with call to `main(void)`
STATEMENT: >>>
When all of the following has been established,

the Zephyr RTOS shall call the C function `main(void)` on the system initialization stack:

- each C++ static object has been initialized; and
- each SMP context has been initialized; and
- each System Initialization notification has been published; and
- each memory access protection has been established.
<<<

[REQUIREMENT]
UID: ZEP-137
STATUS: Draft
TYPE: Functional
COMPONENT: System Initialization
TITLE: Initialization Notifications given in Registration Priority Order
STATEMENT: >>>
The Zephyr RTOS shall publish notifications for an event following the notification priority indicated in the event registration.
<<<

[REQUIREMENT]
UID: ZEP-132
STATUS: Draft
TYPE: Functional
COMPONENT: System Initialization
TITLE: Pre-CPU Architecture Initialization Notification
STATEMENT: >>>
While the CPU Architecture-specific initialization has not begun,

When the C language execution environment has been initialized,

the Zephyr RTOS shall publish a notification to each component registered for this event notification.
<<<

[REQUIREMENT]
UID: ZEP-133
STATUS: Draft
TYPE: Functional
COMPONENT: System Initialization
TITLE: Pre-Kernel Initialization Notification
STATEMENT: >>>
While the RTOS Kernel initialization has not begun,

When the CPU Architecture has been initialized,

the Zephyr RTOS shall publish a notification to each component registered for the Pre-Kernel Initialization event notification.
<<<

[REQUIREMENT]
UID: ZEP-134
STATUS: Draft
TYPE: Functional
COMPONENT: System Initialization
TITLE: Post-Kernel Initialization Notification
STATEMENT: >>>
While the C++ static objects have not been initialized,

When the RTOS Kernel initialization is complete,

the Zephyr RTOS shall publish a notification to each component registered for the Post-Kernel Initialization event notification.
<<<

[REQUIREMENT]
UID: ZEP-135
STATUS: Draft
TYPE: Functional
COMPONENT: System Initialization
TITLE: Application Initialization Notification
STATEMENT: >>>
While the CPU memory coherence has not been established,

When all C++ static objects have been initialized,

the Zephyr RTOS shall publish a notification to each component registered for the Application Initialization event notification.
<<<

[REQUIREMENT]
UID: ZEP-136
STATUS: Draft
TYPE: Functional
COMPONENT: System Initialization
TITLE: Symmetric Multi-Processing Initialized Notification
STATEMENT: >>>
Where the Symmetric Multi-Processing feature is enabled,

Where the Non-Delayed SMP Initialization feature is enabled,

While the Zephyr RTOS is in the initialization state,

When the SMP initialization is complete,

the Zephyr RTOS shall publish a notification to each component registered for the SMP Initialized notification event.
<<<

[/SECTION]

[SECTION]
TITLE: Non-Functional Requirements

[FREETEXT]

TBD

[/FREETEXT]

[/SECTION]
